/* Simple C merge sort algorithm setup */

#include <stdio.h>
#include <stdlib.h>

void mergeSort(int *arr, int numElems)
{
   if (numElems > 1)
   {
      int mid = numElems/2;
      int *left = (int *)calloc(1, mid * sizeof(int));
      int *right = (int *)calloc(1, (numElems - mid) * sizeof(int));
      int i;

      for (i = 0; i < mid; i++)
      {
         left[i] = arr[i];
      }

      for (i = mid; i < (numElems -mid); i++)
      {
         right[mid - i] = arr[i];
      }

      mergeSort(left, mid);
      mergeSort(right, (numElems - mid));

      merge(arr, left, mid, right, (numElems - mid));   
   }
}


void merge(int *arr, int *left, int lNum, int *right, int rNum)
{
   int aC = 0, lC = 0, rC = 0;

   while ((lC < lNum) && (rC < rNum))
   {
      if (left[lC] <= right[rC])
      {
         arr[aC++] = left[lC++];
      }
      else
      {
         arr[aC++] = right[rC++];
      }
   }

   while (lC < lNum)
   {
      arr[aC++] = left[lC++];
   }

   while (rC < rNum)
   {
      arr[aC++] = right[rC++];
   }
}